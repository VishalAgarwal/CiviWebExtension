<?php
/*
+--------------------------------------------------------------------+
| CiviCRM version 4.6                                                |
+--------------------------------------------------------------------+
| Copyright CiviCRM LLC (c) 2004-2015                                |
+--------------------------------------------------------------------+
| This file is a part of CiviCRM.                                    |
|                                                                    |
| CiviCRM is free software; you can copy, modify, and distribute it  |
| under the terms of the GNU Affero General Public License           |
| Version 3, 19 November 2007 and the CiviCRM Licensing Exception.   |
|                                                                    |
| CiviCRM is distributed in the hope that it will be useful, but     |
| WITHOUT ANY WARRANTY; without even the implied warranty of         |
| MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.               |
| See the GNU Affero General Public License for more details.        |
|                                                                    |
| You should have received a copy of the GNU Affero General Public   |
| License and the CiviCRM Licensing Exception along                  |
| with this program; if not, contact CiviCRM LLC                     |
| at info[AT]civicrm[DOT]org. If you have questions about the        |
| GNU Affero General Public License or the licensing of CiviCRM,     |
| see the CiviCRM license FAQ at http://civicrm.org/licensing        |
+--------------------------------------------------------------------+
*/
/**
 * @package CRM
 * @copyright CiviCRM LLC (c) 2004-2015
 *
 * Generated from xml/schema/CRM/Core/WebTracking.xml
 * DO NOT EDIT.  Generated by CRM_Core_CodeGen
 */
require_once 'CRM/Core/DAO.php';
require_once 'CRM/Utils/Type.php';
class CRM_Civiwebtracking_DAO_WebTracking extends CRM_Core_DAO
{
  /**
   * static instance to hold the table name
   *
   * @var string
   */
  static $_tableName = 'civicrm_webtracking';
  /**
   * static instance to hold the field values
   *
   * @var array
   */
  static $_fields = null;
  /**
   * static instance to hold the keys used in $_fields for each field.
   *
   * @var array
   */
  static $_fieldKeys = null;
  /**
   * static instance to hold the FK relationships
   *
   * @var string
   */
  static $_links = null;
  /**
   * static instance to hold the values that can
   * be imported
   *
   * @var array
   */
  static $_import = null;
  /**
   * static instance to hold the values that can
   * be exported
   *
   * @var array
   */
  static $_export = null;
  /**
   * static value to see if we should log any modifications to
   * this table in the civicrm_log table
   *
   * @var boolean
   */
  static $_log = true;
  /**
   * Serial No.
   *
   * @var int unsigned
   */
  public $id;
  /**
   * Holds the id of the Event/Contribution page
   *
   * @var int unsigned
   */
  public $page_id;
  /**
   * Denotes whether the page is an event page or a contribution page
   *
   * @var string
   */
  public $page_category;
  /**
   * Denotes whether webtracking is enabled or not
   *
   * @var boolean
   */
  public $enable_tracking;
  /**
   * Unique UAID provided by google analytics
   *
   * @var string
   */
  public $tracking_id;
   /**
   * Track the event of user clicking on the register button
   *
   * @var boolean
   */
  public $track_register;
   /**
   * Track the event of user changing the default price option
   *
   * @var boolean
   */
  public $track_price_change;
   /**
   * Track the event of user clicking on the confirm register button
   *
   * @var boolean
   */
  public $track_confirm_register;
   /**
   * Denotes whether ecommerce tracking is enabled or not
   *
   * @var boolean
   */
  public $track_ecommerce;
   /**
   * Denotes whether the page is the primary page of a google analytics experiment
   *
   * @var boolean
   */
  public $is_experiment;
   /**
   * Unique experiment ID provided by google analytics
   *
   * @var string
   */
  public $experiment_id;
  /**
   * class constructor
   *
   * @return civicrm_webtracking
   */
  function __construct()
  {
    $this->__table = 'civicrm_webtracking';
    parent::__construct();
  }
  /**
   * Returns all the column names of this table
   *
   * @return array
   */
  static function &fields()
  {
    if (!(self::$_fields)) {
      self::$_fields = array(
        'id' => array(
          'name' => 'id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Serial No.') ,
          'description' => 'Serial No.',
          'required' => true,
        ) ,   
        'page_id' => array(
          'name' => 'page_id',
          'type' => CRM_Utils_Type::T_INT,
          'title' => ts('Page ID') ,
          'description' => 'Holds the id of the Event/Contribution page',
          'required' => true,
        ) ,
        'page_category' => array(
          'name' => 'page_category',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Page Category') ,
          'description' => 'Denotes whether the page is an event page or a contribution page',
          'required' => true,
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
        ) ,
        'enable_tracking' => array(
          'name' => 'enable_tracking',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Enable Tracking') ,
          'description' => 'Denotes whether webtracking is enabled or not',
        ) ,
        'tracking_id' => array(
          'name' => 'tracking_id',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Tracking ID') ,
          'description' => 'Unique UAID provided by google analytics',
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
        ) ,
        'track_register' => array(
          'name' => 'track_register',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Track Register') ,
          'description' => 'Track the event of user clicking on the register button',
        ) ,
        'track_price_change' => array(
          'name' => 'track_price_change',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Track Price Change') ,
          'description' => 'Track the event of user changing the default price option',
        ) ,
        'track_confirm_register' => array(
          'name' => 'track_confirm_register',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Track Confirm Register') ,
          'description' => 'Track the event of user clicking on the confirm register button',
        ) ,
        'track_ecommerce' => array(
          'name' => 'track_ecommerce',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Track Ecommerce') ,
          'description' => 'Denotes whether ecommerce tracking is enabled or not',
        ) ,
        'is_experiment' => array(
          'name' => 'is_experiment',
          'type' => CRM_Utils_Type::T_BOOLEAN,
          'title' => ts('Is Experiment') ,
          'description' => 'Denotes whether the page is the primary page of a google analytics experiment',
        ) ,
        'experiment_id' => array(
          'name' => 'experiment_id',
          'type' => CRM_Utils_Type::T_STRING,
          'title' => ts('Experiment ID') ,
          'description' => 'Unique experiment ID provided by google analytics',
          'maxlength' => 64,
          'size' => CRM_Utils_Type::BIG,
        ) ,
      );
    }
    return self::$_fields;
  }
  /**
   * Returns an array containing, for each field, the arary key used for that
   * field in self::$_fields.
   *
   * @return array
   */
  static function &fieldKeys()
  {
    if (!(self::$_fieldKeys)) {
      self::$_fieldKeys = array(
        'id' => 'id',
        'page_id' => 'page_id',
        'page_category' => 'page_category',
        'enable_tracking' => 'enable_tracking',
        'tracking_id' => 'tracking_id',
        'track_register' => 'track_register',
        'track_price_change' => 'track_price_change',
        'track_confirm_register' => 'track_confirm_register',
        'track_ecommerce' => 'track_ecommerce',
        'is_experiment' => 'is_experiment',
        'experiment_id' => 'experiment_id',
      );
    }
    return self::$_fieldKeys;
  }
  /**
   * Returns the names of this table
   *
   * @return string
   */
  static function getTableName()
  {
    return self::$_tableName;
  }
  /**
   * Returns if this table needs to be logged
   *
   * @return boolean
   */
  function getLog()
  {
    return self::$_log;
  }
  /**
   * Returns the list of fields that can be imported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &import($prefix = false)
  {
    if (!(self::$_import)) {
      self::$_import = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('import', $field)) {
          if ($prefix) {
            self::$_import['webtracking'] = & $fields[$name];
          } else {
            self::$_import[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_import;
  }
  /**
   * Returns the list of fields that can be exported
   *
   * @param bool $prefix
   *
   * @return array
   */
  static function &export($prefix = false)
  {
    if (!(self::$_export)) {
      self::$_export = array();
      $fields = self::fields();
      foreach($fields as $name => $field) {
        if (CRM_Utils_Array::value('export', $field)) {
          if ($prefix) {
            self::$_export['webtracking'] = & $fields[$name];
          } else {
            self::$_export[$name] = & $fields[$name];
          }
        }
      }
    }
    return self::$_export;
  }
}
